{-# OPTIONS --without-K --exact-split --safe #-}

module QPi.Syntax where

open import Pi.Types using (U; I; _√ó·µ§_; ùüö)
open import Pi.Language using (_‚ü∑_; !‚ü∑)
--open import CommMonoid using (CMStructure; CMon; module Build)

---------------------------------------------------------------------------
-- The surface Quantum Pi language

infix  10 _‚áî_
infixr 30 _>>>_
infixr 40 _***_

private
  variable
    t t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ : U

{--
-- Set things up
  CM : CMStructure
  CM = CMon U I _√ó·µ§_

  module M = Build CM
--}
  
data _‚áî_ : U ‚Üí U ‚Üí Set where
  arrZ        : (t‚ÇÅ ‚ü∑ t‚ÇÇ) ‚Üí (t‚ÇÅ ‚áî t‚ÇÇ) 
  arrœï        : (t‚ÇÅ ‚ü∑ t‚ÇÇ) ‚Üí (t‚ÇÅ ‚áî t‚ÇÇ)
  unite‚ãÜl   : I √ó·µ§ t ‚áî t
  uniti‚ãÜl   : t ‚áî I √ó·µ§ t
  swap‚ãÜ    : t‚ÇÅ √ó·µ§ t‚ÇÇ ‚áî  t‚ÇÇ √ó·µ§ t‚ÇÅ
  assocl‚ãÜ  : t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ) ‚áî (t‚ÇÅ √ó·µ§ t‚ÇÇ) √ó·µ§ t‚ÇÉ
  assocr‚ãÜ  : (t‚ÇÅ √ó·µ§ t‚ÇÇ) √ó·µ§ t‚ÇÉ ‚áî t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ)
  id‚áî         : t ‚áî t
  _>>>_       : (t‚ÇÅ ‚áî t‚ÇÇ) ‚Üí (t‚ÇÇ ‚áî t‚ÇÉ) ‚Üí (t‚ÇÅ ‚áî t‚ÇÉ)
  _***_       : (t‚ÇÅ ‚áî t‚ÇÉ) ‚Üí (t‚ÇÇ ‚áî t‚ÇÑ) ‚Üí (t‚ÇÅ √ó·µ§ t‚ÇÇ ‚áî t‚ÇÉ √ó·µ§ t‚ÇÑ)
  zero        : I ‚áî ùüö
  assertZero  : ùüö ‚áî I

{--
pattern unite‚ãÜl = mult M.unite‚ãÜ
pattern uniti‚ãÜl = mult M.uniti‚ãÜ
pattern swap‚ãÜ   = mult M.swap‚ãÜ
pattern assocl‚ãÜ = mult M.assocl‚ãÜ
pattern assocr‚ãÜ = mult M.assocr‚ãÜ
--}

-- These are right-biased
unite‚ãÜr : {t : U} ‚Üí t √ó·µ§ I ‚áî  t
unite‚ãÜr = swap‚ãÜ >>> unite‚ãÜl

uniti‚ãÜr : {t : U} ‚Üí t ‚áî t √ó·µ§ I
uniti‚ãÜr =  uniti‚ãÜl >>> swap‚ãÜ 

inv : t‚ÇÅ ‚áî t‚ÇÇ ‚Üí t‚ÇÇ ‚áî t‚ÇÅ
inv (arrZ c) = arrZ (!‚ü∑ c)
inv (arrœï c) = arrœï (!‚ü∑ c)
inv (unite‚ãÜl) = uniti‚ãÜl
inv (uniti‚ãÜl) = unite‚ãÜl
inv (swap‚ãÜ) = swap‚ãÜ
inv (assocl‚ãÜ) = assocr‚ãÜ
inv (assocr‚ãÜ) = assocl‚ãÜ
inv id‚áî = id‚áî
inv (d‚ÇÅ >>> d‚ÇÇ) = inv d‚ÇÇ >>> inv d‚ÇÅ
inv (d‚ÇÅ *** d‚ÇÇ) = inv d‚ÇÅ *** inv d‚ÇÇ
inv zero = assertZero
inv assertZero = zero

---------------------------------------------------------------------------
