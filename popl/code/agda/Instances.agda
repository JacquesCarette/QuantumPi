{-# OPTIONS --without-K --exact-split --safe #-}

-- Show that Unitary(?) has states and effects

module Instances where

import Data.Float as F
open import Data.List using (map)
open import Data.Maybe using (Maybe; just; nothing)
open import Data.Product using (_,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt)
open import Function using (_‚àò_; flip)

open import PiSyntax
import PiZ
import PiH
open import PiBij using (generalize)
open import Unitary
import ArrowsOverPair as A
open import GenericList
open import StatesAndEffects
open Direct

-- This "Forward" interpreter is in ùí∞ space, which is common to PiZ and PiH
Fwd : U ‚Üí U ‚Üí Set
Fwd t‚ÇÅ t‚ÇÇ = ùí∞ t‚ÇÅ ‚Üí ùí∞ t‚ÇÇ

FC : Categorical Fwd
FC = record
  { idr = Œª x ‚Üí x
  ; comp = Œª f g h x ‚Üí g (f h) x
  }

evalTL‚ÇÅ : ‚àÄ {t‚ÇÅ t‚ÇÇ : U} ‚Üí TList t‚ÇÅ t‚ÇÇ ‚Üí Fwd t‚ÇÅ t‚ÇÇ
evalTL‚ÇÅ tl = evalTL FC (generalize PiZ.PiZ) (generalize PiH.PiH) tl

infixl 9 _‚óã_

_‚óã_ : {A B C : Set} ‚Üí (A ‚Üí B) ‚Üí (B¬†‚Üí C) ‚Üí (A ‚Üí C)
f ‚óã g = Œª a ‚Üí g (f a)

private
  state : {t‚ÇÇ : U} (n : N) ‚Üí ùí∞ ((N‚áíU n) √ó·µ§ t‚ÇÇ) ‚Üí ùí∞ (I √ó·µ§ t‚ÇÇ)
  state (just x) f z = sumf (map (Œª w ‚Üí f (w , proj‚ÇÇ z)) (enumN (just x)))
  state nothing  f z = f z

  effect : {t : U} (n : N) ‚Üí ùí∞ (I √ó·µ§ t) ‚Üí ùí∞ ((N‚áíU n) √ó·µ§ t)
  effect x f z = f (tt , proj‚ÇÇ z)

eval : ‚àÄ {t‚ÇÅ t‚ÇÇ : U} ‚Üí StEffPi t‚ÇÅ t‚ÇÇ ‚Üí Fwd t‚ÇÅ t‚ÇÇ
eval (lift {t‚ÇÅ} {t‚ÇÇ} {just x} {just y} z)   = evalTL‚ÇÅ A.uniti*l ‚óã effect (just x) ‚óã evalTL‚ÇÅ z ‚óã state (just y) ‚óã evalTL‚ÇÅ A.unite*l
eval (lift {t‚ÇÅ} {t‚ÇÇ} {just x} {nothing} z)  = evalTL‚ÇÅ A.uniti*l ‚óã effect (just x) ‚óã evalTL‚ÇÅ (z A.>>> A.unite*l)
eval (lift {t‚ÇÅ} {t‚ÇÇ} {nothing} {just x} z)  = evalTL‚ÇÅ (A.uniti*l A.>>> z) ‚óã (state (just x) ‚óã evalTL‚ÇÅ A.unite*l)
eval (lift {t‚ÇÅ} {t‚ÇÇ} {nothing} {nothing} z) = evalTL‚ÇÅ (A.uniti*l A.>>> z A.>>> A.unite*l)

Bool : U
Bool = I +·µ§ I

{--

1 -> unit intro
1 x 1 x 1 x 1 -> zero
2 x 2 x 2 x 2 -> simon1 ; simon2 ; simon1

--}

-- Simon using the Direct method
module SimonDirect where
  open Direct

  simon : StEffPi I (Bool √ó·µ§ Bool √ó·µ§ Bool √ó·µ§ Bool)
  simon =
    uniti*l >>>>
    idst *** uniti*l >>>>
    idst *** (idst *** uniti*l) >>>>
    (zero *** (zero *** (zero *** zero))) >>>>
    arr (A.arr‚ÇÇ simon‚ÇÅ) >>>>
    arr (A.arr‚ÇÅ simon‚ÇÇ) >>>>
    arr (A.arr‚ÇÇ simon‚ÇÅ)
