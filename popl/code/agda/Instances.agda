{-# OPTIONS --without-K --exact-split --safe #-}

-- Show that Unitary(?) has states and effects

module Instances where

open import Data.Unit using (tt)
open import Data.Product using (_,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Function using (_‚àò_)

open import PiSyntax
import PiZ
import PiH
open import PiBij using (generalize)
open import Unitary
open import ArrowsOverPair hiding (_***_)
open import GenericList
open import StatesAndEffects

-- This "Forward" interpreter is in ùí∞ space, which is common to PiZ and PiH
Fwd : U ‚Üí U ‚Üí Set
Fwd t‚ÇÅ t‚ÇÇ = ùí∞ t‚ÇÅ ‚Üí ùí∞ t‚ÇÇ

FC : Categorical Fwd
FC = record
  { idr = Œª x ‚Üí x
  ; comp = Œª f g h x ‚Üí g (f h) x
  }

evalTL‚ÇÅ : ‚àÄ {t‚ÇÅ t‚ÇÇ : U} ‚Üí TList t‚ÇÅ t‚ÇÇ ‚Üí Fwd t‚ÇÅ t‚ÇÇ
evalTL‚ÇÅ tl = evalTL FC (generalize PiZ.PiZ) (generalize PiH.PiH) tl
Bool = I +·µ§ I

{--

1 -> unit intro
1 x 1 x 1 x 1 -> zero
2 x 2 x 2 x 2 -> simon1 ; simon2 ; simon1

--}

-- Simon using the Direct method
module SimonDirect where
  open Direct

  simon : StEffPi I (Bool √ó·µ§ Bool √ó·µ§ Bool √ó·µ§ Bool)
  simon =
    arr (arr‚ÇÅ uniti‚ãÜl) >>>>
    arr (arr‚ÇÅ (id‚ü∑‚ÇÅ ‚äó uniti‚ãÜl)) >>>>
    arr (arr‚ÇÅ (id‚ü∑‚ÇÅ ‚äó id‚ü∑‚ÇÅ ‚äó uniti‚ãÜl)) >>>>
    (zero *** (zero *** (zero *** zero))) >>>>
    arr (arr‚ÇÇ simon‚ÇÅ) >>>>
    arr (arr‚ÇÅ simon‚ÇÇ) >>>>
    arr (arr‚ÇÇ simon‚ÇÅ)
