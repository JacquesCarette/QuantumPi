{-# OPTIONS --without-K --exact-split --safe #-}

module Pi.Language where

open import Pi.Types using (U; O; I; _+·µ§_; _√ó·µ§_; ùüö)
open import Multiplicative using (MultiplicativeStructure; Mult; module Build)

-------------------------------------------------------------------------------------
-- 1-combinators

private
  variable
    t t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ : U

infix 30 _‚ü∑_
infixr 10 _‚óé_
infixr 20 _‚äï_
infixr 30 _‚äó_

-- Set things up
MS : MultiplicativeStructure
MS = Mult U I _√ó·µ§_

module M = Build MS

data _‚ü∑_ : U ‚Üí U ‚Üí Set where
  id‚ü∑  : t ‚ü∑  t
  --
  swap‚Çä   : t‚ÇÅ +·µ§ t‚ÇÇ ‚ü∑  t‚ÇÇ +·µ§ t‚ÇÅ
  assocr‚Çä : (t‚ÇÅ +·µ§ t‚ÇÇ) +·µ§ t‚ÇÉ ‚ü∑ t‚ÇÅ +·µ§ (t‚ÇÇ +·µ§ t‚ÇÉ)
  assocl‚Çä : t‚ÇÅ +·µ§ (t‚ÇÇ +·µ§ t‚ÇÉ) ‚ü∑ (t‚ÇÅ +·µ§ t‚ÇÇ) +·µ§ t‚ÇÉ
  unite‚Çäl : O +·µ§ t ‚ü∑  t
  uniti‚Çäl : t ‚ü∑  O +·µ§ t
  ---
  mult    : t‚ÇÅ M.‚áî t‚ÇÇ ‚Üí t‚ÇÅ ‚ü∑ t‚ÇÇ
  --
  dist : (t‚ÇÅ +·µ§ t‚ÇÇ) √ó·µ§ t‚ÇÉ ‚ü∑ (t‚ÇÅ √ó·µ§ t‚ÇÉ) +·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ)
  factor : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí (t‚ÇÅ √ó·µ§ t‚ÇÉ) +·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ) ‚ü∑ (t‚ÇÅ +·µ§ t‚ÇÇ) √ó·µ§ t‚ÇÉ
  absorbl : t √ó·µ§ O ‚ü∑ O
  factorzr : O ‚ü∑  t √ó·µ§ O
  --
  _‚óé_     : (t‚ÇÅ ‚ü∑ t‚ÇÇ) ‚Üí (t‚ÇÇ ‚ü∑ t‚ÇÉ) ‚Üí (t‚ÇÅ ‚ü∑ t‚ÇÉ)
  _‚äï_     : (t‚ÇÅ ‚ü∑ t‚ÇÉ) ‚Üí (t‚ÇÇ ‚ü∑ t‚ÇÑ) ‚Üí (t‚ÇÅ +·µ§ t‚ÇÇ ‚ü∑ t‚ÇÉ +·µ§ t‚ÇÑ)
  _‚äó_     : (t‚ÇÅ ‚ü∑ t‚ÇÉ) ‚Üí (t‚ÇÇ ‚ü∑ t‚ÇÑ) ‚Üí (t‚ÇÅ √ó·µ§ t‚ÇÇ ‚ü∑ t‚ÇÉ √ó·µ§ t‚ÇÑ)

pattern unite‚ãÜl = mult M.unite‚ãÜ
pattern uniti‚ãÜl = mult M.uniti‚ãÜ
pattern swap‚ãÜ   = mult M.swap‚ãÜ
pattern assocl‚ãÜ = mult M.assocl‚ãÜ
pattern assocr‚ãÜ = mult M.assocr‚ãÜ

-------------------------------------------------------------------------------------
-- Inverse
!‚ü∑ : t‚ÇÅ ‚ü∑  t‚ÇÇ ‚Üí t‚ÇÇ ‚ü∑  t‚ÇÅ
!‚ü∑ unite‚Çäl = uniti‚Çäl
!‚ü∑ uniti‚Çäl = unite‚Çäl
!‚ü∑ unite‚ãÜl = uniti‚ãÜl
!‚ü∑ uniti‚ãÜl = unite‚ãÜl
!‚ü∑ swap‚Çä   = swap‚Çä
!‚ü∑ swap‚ãÜ   = swap‚ãÜ
!‚ü∑ assocl‚Çä = assocr‚Çä
!‚ü∑ assocr‚Çä = assocl‚Çä
!‚ü∑ assocl‚ãÜ = assocr‚ãÜ
!‚ü∑ assocr‚ãÜ = assocl‚ãÜ
!‚ü∑ absorbl = factorzr
!‚ü∑ factorzr = absorbl
!‚ü∑ dist = factor
!‚ü∑ factor = dist
!‚ü∑ id‚ü∑ = id‚ü∑
!‚ü∑ (c‚ÇÅ ‚óé c‚ÇÇ) = !‚ü∑ c‚ÇÇ ‚óé !‚ü∑ c‚ÇÅ
!‚ü∑ (c‚ÇÅ ‚äï c‚ÇÇ) = !‚ü∑ c‚ÇÅ ‚äï !‚ü∑ c‚ÇÇ
!‚ü∑ (c‚ÇÅ ‚äó c‚ÇÇ) = !‚ü∑ c‚ÇÅ ‚äó !‚ü∑ c‚ÇÇ

-------------------------------------------------------------------------------------
-- Definitional extension of the language; these are often terms in the language.

unite‚Çär : {t : U} ‚Üí t +·µ§ O ‚ü∑  t
unite‚Çär = swap‚Çä ‚óé unite‚Çäl

uniti‚Çär : {t : U} ‚Üí t ‚ü∑  t +·µ§ O
uniti‚Çär = uniti‚Çäl ‚óé swap‚Çä

unite‚ãÜr : {t : U} ‚Üí t √ó·µ§ I ‚ü∑  t
unite‚ãÜr = swap‚ãÜ ‚óé unite‚ãÜl

uniti‚ãÜr : {t : U} ‚Üí t ‚ü∑ t √ó·µ§ I
uniti‚ãÜr =  uniti‚ãÜl ‚óé swap‚ãÜ 

-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
