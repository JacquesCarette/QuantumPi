{-# OPTIONS --without-K --safe #-}

module Reasoning where

open import PiSyntax
  renaming (_‚ü∑‚ÇÅ_ to _‚ü∑_; id‚ü∑‚ÇÅ to id‚ü∑; !‚ü∑‚ÇÅ to !‚ü∑)
open import PiReasoning
open import QPi
  renaming (assocl‚ãÜ to assoclA‚ãÜ; assocr‚ãÜ to assocrA‚ãÜ;
            unite‚ãÜ to uniteA‚ãÜ; uniti‚ãÜ to unitiA‚ãÜ;
            swap‚ãÜ to swapA‚ãÜ)

---------------------------------------------------------------------------
-- Some of the equations

private
  variable
    t‚ÇÅ t‚ÇÇ t‚ÇÉ : U
    c‚ÇÅ c‚ÇÇ c‚ÇÉ : t‚ÇÅ ‚ü∑ t‚ÇÇ
    d d‚ÇÅ d‚ÇÇ d‚ÇÉ : t‚ÇÅ ‚áî t‚ÇÇ

copyZ copyœï : ùüö ‚áî ùüö √ó·µ§ ùüö
copyZ = unitiA‚ãÜ >>> (id‚áî *** zero) >>> (arrZ PiSyntax.cx)
copyœï = arrœï swap‚Çä >>> copyZ >>> (arrœï swap‚Çä *** arrœï swap‚Çä)

data _‚â°_ : {t‚ÇÅ t‚ÇÇ : U} ‚Üí (t‚ÇÅ ‚áî t‚ÇÇ) ‚Üí (t‚ÇÅ ‚áî t‚ÇÇ) ‚Üí Set where
  classicalZ  : (c‚ÇÅ ‚ü∑‚ÇÇ c‚ÇÇ) ‚Üí (arrZ c‚ÇÅ ‚â° arrZ c‚ÇÇ)
  classicalH  : (c‚ÇÅ ‚ü∑‚ÇÇ c‚ÇÇ) ‚Üí (arrœï c‚ÇÅ ‚â° arrœï c‚ÇÇ)
  -- 
  assoc>>>l : (d‚ÇÅ >>> (d‚ÇÇ >>> d‚ÇÉ)) ‚â° ((d‚ÇÅ >>> d‚ÇÇ) >>> d‚ÇÉ)
  assoc>>>r : ((d‚ÇÅ >>> d‚ÇÇ) >>> d‚ÇÉ) ‚â° (d‚ÇÅ >>> (d‚ÇÇ >>> d‚ÇÉ))
  assocl***l : ((d‚ÇÅ *** (d‚ÇÇ *** d‚ÇÉ)) >>> assoclA‚ãÜ) ‚â° (assoclA‚ãÜ >>> ((d‚ÇÅ *** d‚ÇÇ) *** d‚ÇÉ))
  assocl***r : (assoclA‚ãÜ >>> ((d‚ÇÅ *** d‚ÇÇ) *** d‚ÇÉ)) ‚â° ((d‚ÇÅ *** (d‚ÇÇ *** d‚ÇÉ)) >>> assoclA‚ãÜ)
  assocr***l : (assocrA‚ãÜ >>> (d‚ÇÅ *** (d‚ÇÇ *** d‚ÇÉ))) ‚â° (((d‚ÇÅ *** d‚ÇÇ) *** d‚ÇÉ) >>> assocrA‚ãÜ)
  assocr***r : (((d‚ÇÅ *** d‚ÇÇ) *** d‚ÇÉ) >>> assocrA‚ãÜ) ‚â° (assocrA‚ãÜ >>> (d‚ÇÅ *** (d‚ÇÇ *** d‚ÇÉ)))
  idl>>>l   : (id‚áî >>> d) ‚â° d
  idl>>>r   : d ‚â° (id‚áî >>> d)
  idr>>>l   : (d >>> id‚áî) ‚â° d
  idr>>>r   : d ‚â° (d >>> id‚áî)
  linv>>>l  : (d >>> inv d) ‚â° id‚áî
  linv>>>r  : id‚áî ‚â° (d >>> inv d)
  rinv>>>l  : (inv d >>> d) ‚â° id‚áî
  rinv>>>r  : id‚áî ‚â° (inv d >>> d)
  unitel‚ãÜ‚â°r : (uniteA‚ãÜ >>> d‚ÇÇ) ‚â° ((d‚ÇÇ *** d‚ÇÅ) >>> uniteA‚ãÜ)
  uniter‚ãÜ‚â°r : ((d‚ÇÇ *** d‚ÇÅ) >>> uniteA‚ãÜ) ‚â° (uniteA‚ãÜ >>> d‚ÇÇ)
  unitil‚ãÜ‚â°r : (unitiA‚ãÜ >>> (d‚ÇÇ *** d‚ÇÅ)) ‚â° (d‚ÇÇ >>> unitiA‚ãÜ)
  unitir‚ãÜ‚â°r : (d‚ÇÇ >>> unitiA‚ãÜ) ‚â° (unitiA‚ãÜ >>> (d‚ÇÇ *** d‚ÇÅ))
  swapl‚ãÜ‚â° : (swapA‚ãÜ >>> (d‚ÇÅ *** d‚ÇÇ)) ‚â° ((d‚ÇÇ *** d‚ÇÅ) >>> swapA‚ãÜ)
  swapr‚ãÜ‚â° : ((d‚ÇÇ *** d‚ÇÅ) >>> swapA‚ãÜ) ‚â° (swapA‚ãÜ >>> (d‚ÇÅ *** d‚ÇÇ))
  id‚â°     : d ‚â° d
  trans‚â°  : (d‚ÇÅ ‚â° d‚ÇÇ) ‚Üí (d‚ÇÇ ‚â° d‚ÇÉ) ‚Üí (d‚ÇÅ ‚â° d‚ÇÉ)
  -- complementarity
  C : ((copyZ *** id‚áî) >>> (id‚áî *** (inv copyœï)) >>>
      (id‚áî *** copyœï) >>> ((inv copyZ) *** id‚áî)) ‚â° id‚áî

-- Equational reasoning

infixr 10 _‚â°‚ü®_‚ü©_
infix  15 _‚â°‚àé

_‚â°‚ü®_‚ü©_ : (d‚ÇÅ : t‚ÇÅ ‚áî t‚ÇÇ) ‚Üí (d‚ÇÅ ‚â° d‚ÇÇ) ‚Üí (d‚ÇÇ ‚â° d‚ÇÉ) ‚Üí (d‚ÇÅ ‚â° d‚ÇÉ)
_ ‚â°‚ü® e‚ÇÅ ‚ü© e‚ÇÇ = trans‚â° e‚ÇÅ e‚ÇÇ 

_‚â°‚àé : (d : t‚ÇÅ ‚áî t‚ÇÇ) ‚Üí d ‚â° d
_‚â°‚àé t = id‚â°

---------------------------------------------------------------------------
--

{--
hadInv : (had >>> had) ‚â° id‚áî
hadInv = {!  linv>>>l !} 

minusZ‚â°plus : (minus >>> zgate) ‚â° plus
minusZ‚â°plus =
  (minus >>> zgate)
    ‚â°‚ü® id‚â° ‚ü©
  ((plus >>> (had >>> xgate >>> had)) >>> (had >>> xgate >>> had))
    ‚â°‚ü® {!!} ‚ü©
  (plus >>> (had >>> xgate >>> (had >>> had) >>> (xgate >>> had)))
    ‚â°‚ü® {!!} ‚ü©
  (plus >>> (had >>> (xgate >>> xgate) >>> had))
    ‚â°‚ü® {!!} ‚ü©
  (plus >>> (had >>> had))
    ‚â°‚ü® {!!} ‚ü©
  plus ‚â°‚àé
--}

---------------------------------------------------------------------------

