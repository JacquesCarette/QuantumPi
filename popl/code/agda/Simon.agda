
{-# OPTIONS --without-K --exact-split --safe #-}

module Simon where

open import Pi.Types
open import Pi.Language
open import Pi.Reasoning
open import Pi.Terms
import ArrowsOverAmalg as A
open import StatesAndEffects

private
  variable
    t t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ : U

-- Simon fragments

A[B[CD]]‚Üí[AC][BD]  : t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÑ)) ‚ü∑ (t‚ÇÅ √ó·µ§ t‚ÇÉ) √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÑ)
A[B[CD]]‚Üí[AC][BD] {t‚ÇÅ} {t‚ÇÇ} {t‚ÇÉ} {t‚ÇÑ} =
 t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÑ))   ‚ü® id‚ü∑ ‚äó assocl‚ãÜ ‚ü©
 t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ) √ó·µ§ t‚ÇÑ     ‚ü® id‚ü∑ ‚äó swap‚ãÜ ‚äó id‚ü∑ ‚ü©
 t‚ÇÅ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÇ) √ó·µ§ t‚ÇÑ     ‚ü® id‚ü∑ ‚äó assocr‚ãÜ ‚ü©
 t‚ÇÅ √ó·µ§ t‚ÇÉ √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÑ)     ‚ü® assocl‚ãÜ ‚ü©
 (t‚ÇÅ √ó·µ§ t‚ÇÉ) √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÑ)   ‚àé

A[B[CD]]‚Üí[AD][BC]  : t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÑ)) ‚ü∑ (t‚ÇÅ √ó·µ§ t‚ÇÑ) √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ)
A[B[CD]]‚Üí[AD][BC] {t‚ÇÅ} {t‚ÇÇ} {t‚ÇÉ} {t‚ÇÑ} =
 t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÑ))   ‚ü® id‚ü∑ ‚äó assocl‚ãÜ ‚ü©
 t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ) √ó·µ§ t‚ÇÑ     ‚ü® id‚ü∑ ‚äó swap‚ãÜ ‚ü©
 t‚ÇÅ √ó·µ§ t‚ÇÑ √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ)     ‚ü® assocl‚ãÜ ‚ü©
 (t‚ÇÅ √ó·µ§ t‚ÇÑ) √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ)   ‚àé

A[B[CD]]‚Üí[BC][AD]  : t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÑ)) ‚ü∑ (t‚ÇÇ √ó·µ§ t‚ÇÉ) √ó·µ§ (t‚ÇÅ √ó·µ§ t‚ÇÑ)
A[B[CD]]‚Üí[BC][AD] {t‚ÇÅ} {t‚ÇÇ} {t‚ÇÉ} {t‚ÇÑ} =
  t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÑ))  ‚ü® id‚ü∑ ‚äó assocl‚ãÜ ‚ü©
  t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ) √ó·µ§ t‚ÇÑ    ‚ü® id‚ü∑ ‚äó swap‚ãÜ ‚ü©
  t‚ÇÅ √ó·µ§ t‚ÇÑ √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ)    ‚ü® assocl‚ãÜ ‚ü©
  (t‚ÇÅ √ó·µ§ t‚ÇÑ) √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ)  ‚ü® swap‚ãÜ ‚ü©
  (t‚ÇÇ √ó·µ§ t‚ÇÉ) √ó·µ§ (t‚ÇÅ √ó·µ§ t‚ÇÑ)  ‚àé

A[B[CD]]‚Üí[BD][AC]  : t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÑ)) ‚ü∑ (t‚ÇÇ √ó·µ§ t‚ÇÑ) √ó·µ§ (t‚ÇÅ √ó·µ§ t‚ÇÉ)
A[B[CD]]‚Üí[BD][AC] {t‚ÇÅ} {t‚ÇÇ} {t‚ÇÉ} {t‚ÇÑ} = A[B[CD]]‚Üí[AC][BD] ‚óé swap‚ãÜ

[AC][BD]‚Üí[AD][BC] : {t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ : U} ‚Üí (t‚ÇÅ √ó·µ§ t‚ÇÉ) √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÑ) ‚ü∑ (t‚ÇÅ √ó·µ§ t‚ÇÑ) √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ)
[AC][BD]‚Üí[AD][BC] {t‚ÇÅ} {t‚ÇÇ} {t‚ÇÉ} {t‚ÇÑ} =
  (t‚ÇÅ √ó·µ§ t‚ÇÉ) √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÑ)   ‚ü® assocr‚ãÜ ‚ü©
   t‚ÇÅ √ó·µ§ (t‚ÇÉ √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÑ))  ‚ü® id‚ü∑ ‚äó assocl‚ãÜ ‚ü©
   t‚ÇÅ √ó·µ§ ((t‚ÇÉ √ó·µ§ t‚ÇÇ) √ó·µ§ t‚ÇÑ)  ‚ü® id‚ü∑ ‚äó swap‚ãÜ ‚ü©
   t‚ÇÅ √ó·µ§ (t‚ÇÑ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÇ))  ‚ü® assocl‚ãÜ ‚ü©
   (t‚ÇÅ √ó·µ§ t‚ÇÑ) √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÇ)  ‚ü® id‚ü∑ ‚äó swap‚ãÜ ‚ü©
  (t‚ÇÅ √ó·µ§ t‚ÇÑ) √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ)   ‚àé

-- The 2 Hadamard gates
simon‚ÇÅ : ùüö √ó·µ§ ùüö √ó·µ§ ùüö √ó·µ§ ùüö ‚ü∑ ùüö √ó·µ§ ùüö √ó·µ§ ùüö √ó·µ§ ùüö
simon‚ÇÅ = swap‚Çä ‚äó swap‚Çä ‚äó id‚ü∑ ‚äó id‚ü∑

-- The core of the circuit
simon‚ÇÇ : ùüö √ó·µ§ ùüö √ó·µ§ ùüö √ó·µ§ ùüö ‚ü∑ ùüö √ó·µ§ ùüö √ó·µ§ ùüö √ó·µ§ ùüö
simon‚ÇÇ =
     A[B[CD]]‚Üí[AC][BD]  ‚óé (cx ‚äó id‚ü∑) ‚óé
     [AC][BD]‚Üí[AD][BC]  ‚óé (cx ‚äó id‚ü∑) ‚óé -- swap‚ãÜ to do [AD][BC]‚Üí[BC][AD]
     swap‚ãÜ              ‚óé (cx ‚äó id‚ü∑) ‚óé
     -- up to renaming, [AC][BD]‚Üí[AD][BC] does the same as [BC][AD]‚Üí[BD][AC]
     [AC][BD]‚Üí[AD][BC]  ‚óé (cx ‚äó id‚ü∑) ‚óé !‚ü∑ A[B[CD]]‚Üí[BD][AC]

{--

1 -> unit intro
1 x 1 x 1 x 1 -> zero
2 x 2 x 2 x 2 -> simon1 ; simon2 ; simon1

--}

simon : I ‚Ü≠ (ùüö √ó·µ§ ùüö √ó·µ§ ùüö √ó·µ§ ùüö)
simon =
  arr (A.uniti*l            A.>>>
       A.id A.*** A.uniti*l A.>>>
       A.id A.*** (A.id A.*** A.uniti*l)) >>>>
       
  (zero *** (zero *** (zero *** zero)))   >>>>
  
  arr (A.arr‚ÇÇ simon‚ÇÅ        A.>>>
       A.arr‚ÇÅ simon‚ÇÇ        A.>>>
       A.arr‚ÇÇ simon‚ÇÅ)


