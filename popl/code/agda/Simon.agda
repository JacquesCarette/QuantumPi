{-# OPTIONS --without-K --exact-split --safe #-}

module Simon where

open import PiSyntax
import ArrowsOverPair as A
open import StatesAndEffects

private
  variable
    t t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ t‚ÇÖ t‚ÇÜ : U

-- Simon fragments

A[B[CD]]‚Üí[AC][BD]  : t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÑ)) ‚ü∑‚ÇÅ (t‚ÇÅ √ó·µ§ t‚ÇÉ) √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÑ)
A[B[CD]]‚Üí[AC][BD] {t‚ÇÅ} {t‚ÇÇ} {t‚ÇÉ} {t‚ÇÑ} =
 t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÑ))   ‚ü® id‚ü∑‚ÇÅ ‚äó assocl‚ãÜ ‚ü©
 t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ) √ó·µ§ t‚ÇÑ     ‚ü® id‚ü∑‚ÇÅ ‚äó swap‚ãÜ ‚äó id‚ü∑‚ÇÅ ‚ü©
 t‚ÇÅ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÇ) √ó·µ§ t‚ÇÑ     ‚ü® id‚ü∑‚ÇÅ ‚äó assocr‚ãÜ ‚ü©
 t‚ÇÅ √ó·µ§ t‚ÇÉ √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÑ)     ‚ü® assocl‚ãÜ ‚ü©
 (t‚ÇÅ √ó·µ§ t‚ÇÉ) √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÑ)   ‚àé

A[B[CD]]‚Üí[AD][BC]  : t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÑ)) ‚ü∑‚ÇÅ (t‚ÇÅ √ó·µ§ t‚ÇÑ) √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ)
A[B[CD]]‚Üí[AD][BC] {t‚ÇÅ} {t‚ÇÇ} {t‚ÇÉ} {t‚ÇÑ} =
 t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÑ))   ‚ü® id‚ü∑‚ÇÅ ‚äó assocl‚ãÜ ‚ü©
 t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ) √ó·µ§ t‚ÇÑ     ‚ü® id‚ü∑‚ÇÅ ‚äó swap‚ãÜ ‚ü©
 t‚ÇÅ √ó·µ§ t‚ÇÑ √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ)     ‚ü® assocl‚ãÜ ‚ü©
 (t‚ÇÅ √ó·µ§ t‚ÇÑ) √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ)   ‚àé

A[B[CD]]‚Üí[BC][AD]  : t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÑ)) ‚ü∑‚ÇÅ (t‚ÇÇ √ó·µ§ t‚ÇÉ) √ó·µ§ (t‚ÇÅ √ó·µ§ t‚ÇÑ)
A[B[CD]]‚Üí[BC][AD] {t‚ÇÅ} {t‚ÇÇ} {t‚ÇÉ} {t‚ÇÑ} =
  t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÑ))  ‚ü® id‚ü∑‚ÇÅ ‚äó assocl‚ãÜ ‚ü©
  t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ) √ó·µ§ t‚ÇÑ    ‚ü® id‚ü∑‚ÇÅ ‚äó swap‚ãÜ ‚ü©
  t‚ÇÅ √ó·µ§ t‚ÇÑ √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ)    ‚ü® assocl‚ãÜ ‚ü©
  (t‚ÇÅ √ó·µ§ t‚ÇÑ) √ó·µ§ (t‚ÇÇ √ó·µ§ t‚ÇÉ)  ‚ü® swap‚ãÜ ‚ü©
  (t‚ÇÇ √ó·µ§ t‚ÇÉ) √ó·µ§ (t‚ÇÅ √ó·µ§ t‚ÇÑ)  ‚àé

A[B[CD]]‚Üí[BD][AC]  : t‚ÇÅ √ó·µ§ (t‚ÇÇ √ó·µ§ (t‚ÇÉ √ó·µ§ t‚ÇÑ)) ‚ü∑‚ÇÅ (t‚ÇÇ √ó·µ§ t‚ÇÑ) √ó·µ§ (t‚ÇÅ √ó·µ§ t‚ÇÉ)
A[B[CD]]‚Üí[BD][AC] {t‚ÇÅ} {t‚ÇÇ} {t‚ÇÉ} {t‚ÇÑ} = A[B[CD]]‚Üí[AC][BD] ‚óé swap‚ãÜ

-- The 2 Hadamard gates
simon‚ÇÅ : ùüö √ó·µ§ ùüö √ó·µ§ ùüö √ó·µ§ ùüö ‚ü∑‚ÇÅ ùüö √ó·µ§ ùüö √ó·µ§ ùüö √ó·µ§ ùüö
simon‚ÇÅ = swap‚Çä ‚äó swap‚Çä ‚äó id‚ü∑‚ÇÅ ‚äó id‚ü∑‚ÇÅ

-- The core of the circuit
simon‚ÇÇ : ùüö √ó·µ§ ùüö √ó·µ§ ùüö √ó·µ§ ùüö ‚ü∑‚ÇÅ ùüö √ó·µ§ ùüö √ó·µ§ ùüö √ó·µ§ ùüö
simon‚ÇÇ =
     A[B[CD]]‚Üí[AC][BD]  ‚óé (cnot ‚äó id‚ü∑‚ÇÅ) ‚óé !‚ü∑‚ÇÅ A[B[CD]]‚Üí[AC][BD]
  ‚óé  A[B[CD]]‚Üí[AD][BC]  ‚óé (cnot ‚äó id‚ü∑‚ÇÅ) ‚óé !‚ü∑‚ÇÅ A[B[CD]]‚Üí[AD][BC]
  ‚óé  A[B[CD]]‚Üí[BC][AD]  ‚óé (cnot ‚äó id‚ü∑‚ÇÅ) ‚óé !‚ü∑‚ÇÅ A[B[CD]]‚Üí[BC][AD]
  ‚óé  A[B[CD]]‚Üí[BD][AC]  ‚óé (cnot ‚äó id‚ü∑‚ÇÅ) ‚óé !‚ü∑‚ÇÅ A[B[CD]]‚Üí[BD][AC]

{--

1 -> unit intro
1 x 1 x 1 x 1 -> zero
2 x 2 x 2 x 2 -> simon1 ; simon2 ; simon1

--}

simon : StEffPi I (ùüö √ó·µ§ ùüö √ó·µ§ ùüö √ó·µ§ ùüö)
simon =
  uniti*l >>>>
  idst *** uniti*l >>>>
  idst *** (idst *** uniti*l) >>>>
  (zero *** (zero *** (zero *** zero))) >>>>
  arr (A.arr‚ÇÇ simon‚ÇÅ) >>>>
  arr (A.arr‚ÇÅ simon‚ÇÇ) >>>>
  arr (A.arr‚ÇÇ simon‚ÇÅ)
