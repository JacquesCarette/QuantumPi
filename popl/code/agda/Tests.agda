{-# OPTIONS --without-K --safe #-}

--Note: not exact-split here, that's too much of a pain
module Tests where

open import Data.Float using (Float)
open import Data.List using (List; _‚à∑_; []; map)
open import Data.Product using (_√ó_; _,_)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt)
open import Function using (_‚àò_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import PiSyntax
open import PiBij using (‚ü¶_‚üß; enum; generalize)
import ArrowsOverAmalg as A
open import Amalgamation using (TList)
open import Instances using (evalTL‚ÇÅ)
import PiZ
import PiH
open import Simon using (simon‚ÇÅ; simon‚ÇÇ)
open import Unitary

-- Infrastructure for testing
show : {t : U} ‚Üí (‚ü¶ t ‚üß ‚Üí Float) ‚Üí List (‚ü¶ t ‚üß √ó Float)
show {t} v = map (Œª i ‚Üí (i , v i)) (enum t)

-- Note: these tests are EVIL because they use the most brutal equality possible on the worst thing imaginable, i.e. Floats.

-- Test things in Amalgamated language
test-notH : show (evalTL‚ÇÅ (A.arr‚ÇÇ swap‚Çä) PiH.trueH) ‚â° (inj‚ÇÅ tt , 0.38268343235472) ‚à∑ (inj‚ÇÇ tt , 0.9238795325155821) ‚à∑ []
test-notH = refl

test-id : show (evalTL‚ÇÅ (A.idzh) PiH.trueH) ‚â° (inj‚ÇÅ tt , 0.9238795325155821) ‚à∑ (inj‚ÇÇ tt , -0.38268343235472) ‚à∑ []
test-id = refl

test-Had-true : show (evalTL‚ÇÅ (A.arr‚ÇÇ swap‚Çä) PiZ.trueZ) ‚â° (inj‚ÇÅ tt , 0.7071067811706743) ‚à∑ (inj‚ÇÇ tt , 0.707106781202421) ‚à∑ []
test-Had-true = refl

test-Had-false : show (evalTL‚ÇÅ (A.arr‚ÇÇ swap‚Çä) PiZ.falseZ) ‚â° (inj‚ÇÅ tt , 0.707106781202421) ‚à∑ (inj‚ÇÇ tt , -0.7071067811706743) ‚à∑ []
test-Had-false = refl

test-vec2 : ‚ü¶ ùüö √ó·µ§ ùüö ‚üß ‚Üí Float
test-vec2 (inj‚ÇÅ x , inj‚ÇÅ x‚ÇÅ) = 1.0
test-vec2 (inj‚ÇÅ x , inj‚ÇÇ y) = 0.0
test-vec2 (inj‚ÇÇ y , inj‚ÇÅ x) = 0.0
test-vec2 (inj‚ÇÇ y , inj‚ÇÇ y‚ÇÅ) = 0.0


test-Had2-00 :  show ((R‚Åª¬π (ùüö √ó·µ§ ùüö) ‚àò generalize PiZ.PiZ (id‚ü∑‚ÇÅ ‚äó swap‚Çä) ‚àò R (ùüö √ó·µ§ ùüö))  test-vec2) ‚â°
  ((inj‚ÇÅ tt , inj‚ÇÅ tt) , 0.7071067811706743) ‚à∑
      ((inj‚ÇÅ tt , inj‚ÇÇ tt) , 0.707106781202421) ‚à∑
      ((inj‚ÇÇ tt , inj‚ÇÅ tt) , 0.0) ‚à∑
      ((inj‚ÇÇ tt , inj‚ÇÇ tt) , 1.1102230246251565e-16) ‚à∑ []
test-Had2-00 = refl

test-Had2-0 : show (PiH.evalH (id‚ü∑‚ÇÅ ‚äó swap‚Çä) test-vec2) ‚â°
  ((inj‚ÇÅ tt , inj‚ÇÅ tt) , 0.7071067811706743) ‚à∑
      ((inj‚ÇÅ tt , inj‚ÇÇ tt) , 0.707106781202421) ‚à∑
      ((inj‚ÇÇ tt , inj‚ÇÅ tt) , 0.0) ‚à∑
      ((inj‚ÇÇ tt , inj‚ÇÇ tt) , 1.1102230246251565e-16) ‚à∑ []
test-Had2-0 = refl

test-Had2-1 : show (evalTL‚ÇÅ (A.idzh A.*** A.arr‚ÇÇ swap‚Çä) test-vec2) ‚â°
  ((inj‚ÇÅ tt , inj‚ÇÅ tt) , 0.7071067811706743) ‚à∑
      ((inj‚ÇÅ tt , inj‚ÇÇ tt) , 0.707106781202421) ‚à∑
      ((inj‚ÇÇ tt , inj‚ÇÅ tt) , 0.0) ‚à∑
      ((inj‚ÇÇ tt , inj‚ÇÇ tt) , 1.1102230246251565e-16) ‚à∑ []
test-Had2-1 = refl

test-Had2-2 : show (evalTL‚ÇÅ (A.arr‚ÇÅ swap‚Çä A.*** A.idzh) test-vec2) ‚â°
  ((inj‚ÇÅ tt , inj‚ÇÅ tt) , 0.0) ‚à∑ ((inj‚ÇÅ tt , inj‚ÇÇ tt) , 0.0) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÅ tt) , 1.0) ‚à∑ ((inj‚ÇÇ tt , inj‚ÇÇ tt) , 0.0) ‚à∑ []
test-Had2-2 = refl

test-Had2-3 : show (evalTL‚ÇÅ (A.arr‚ÇÇ swap‚Çä A.*** A.idzh) test-vec2) ‚â°
  ((inj‚ÇÅ tt , inj‚ÇÅ tt) , 0.7071067811706744) ‚à∑
      ((inj‚ÇÅ tt , inj‚ÇÇ tt) , 0.0) ‚à∑
      ((inj‚ÇÇ tt , inj‚ÇÅ tt) , 0.7071067812024212) ‚à∑
      ((inj‚ÇÇ tt , inj‚ÇÇ tt) , 0.0) ‚à∑ []
test-Had2-3 = refl

inner-simon : TList (ùüö √ó·µ§ ùüö √ó·µ§ ùüö √ó·µ§ ùüö) (ùüö √ó·µ§ ùüö √ó·µ§ ùüö √ó·µ§ ùüö)
inner-simon = A.arr‚ÇÇ simon‚ÇÅ A.>>> A.arr‚ÇÅ simon‚ÇÇ A.>>> A.arr‚ÇÇ simon‚ÇÅ

test-vec4 : ‚ü¶ ùüö √ó·µ§ ùüö √ó·µ§ ùüö √ó·µ§ ùüö ‚üß ‚Üí Float
test-vec4 (inj‚ÇÅ _ , inj‚ÇÅ _ , inj‚ÇÅ _ , inj‚ÇÅ _) = 1.0
test-vec4 (_ , _ , _ , _) = 0.0

-- the first part of Simon "works" decently now
test-s‚ÇÅ : show (evalTL‚ÇÅ (A.arr‚ÇÇ simon‚ÇÅ) test-vec4) ‚â°
  ((inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÅ tt) , 0.49999999997755185) ‚à∑
  ((inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÇ tt) , 1.6348909148276115e-17) ‚à∑
  ((inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÅ tt) , 2.7755575614747768e-17) ‚à∑
  ((inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÇ tt) , -2.2893051763283195e-17) ‚à∑
  ((inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÅ tt) , 0.5) ‚à∑
  ((inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÇ tt) , 2.0237652028100054e-17) ‚à∑
  ((inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÅ tt) , 3.925231146709438e-17) ‚à∑
  ((inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÇ tt) , -2.1659708620061032e-17) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÅ tt) , 0.5) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÇ tt) , 2.0237652028100058e-17) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÅ tt) , 3.925231146709438e-17) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÇ tt) , -2.165970862006103e-17) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÅ tt) , 0.5000000000224483) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÇ tt) , 2.807041067731488e-17) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÅ tt) , 2.7755575616510065e-17) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÇ tt) , -3.3059056140334115e-17) ‚à∑ []
test-s‚ÇÅ = refl

-- takes ~22s on my MacBook Air
-- use columns to highly values from virtual 0s
test-is : show (evalTL‚ÇÅ inner-simon test-vec4) ‚â°
  ((inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÅ tt) , 0.5000000000000001)  ‚à∑
  ((inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÇ tt) ,        4.738173134873553e-17) ‚à∑
  ((inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÅ tt) ,        4.5106981034918784e-17) ‚à∑
  ((inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÇ tt) , 0.5000000000000001) ‚à∑
  ((inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÅ tt) ,        -2.24482377131352e-11) ‚à∑
  ((inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÇ tt) ,        3.350394354180222e-17) ‚à∑
  ((inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÅ tt) ,        1.8013739550477034e-17) ‚à∑
  ((inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÇ tt) ,        2.244829322428643e-11) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÅ tt) ,        -2.2448209957559584e-11) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÅ tt , inj‚ÇÇ tt) ,        5.7483679261733055e-18) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÅ tt) ,        5.1923354385602495e-18) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÇ tt , inj‚ÇÇ tt) ,        2.24482377131352e-11) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÅ tt) , 0.5000000000000002) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÅ tt , inj‚ÇÇ tt) ,        8.129419882522301e-18) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÅ tt) ,        -1.7351405419289864e-17) ‚à∑
  ((inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÇ tt , inj‚ÇÇ tt) , -0.5000000000000001) ‚à∑ []
test-is = refl
